// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: u4Y4MGpSRpZo7PLABQqvDf
// Component: sP6ms71BJ0P1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { RichLayout } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-layout";
import { ContentfulFetcher } from "@plasmicpkgs/plasmic-contentful";
import { ContentfulField } from "@plasmicpkgs/plasmic-contentful";
import { RichCalendar } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-calendar";
import { calendarHelpers as RichCalendar_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-calendar";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_tailwind_3_4_colors_css from "../library_tailwind_3_4_color_tokens/plasmic.module.css"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: u4Y4MGpSRpZo7PLABQqvDf/projectcss
import sty from "./PlasmicNewPage.module.css"; // plasmic-import: sP6ms71BJ0P1/css

createPlasmicElementProxy;

export type PlasmicNewPage__VariantMembers = {};
export type PlasmicNewPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPage__VariantsArgs;
export const PlasmicNewPage__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPage__ArgsType = {};
type ArgPropType = keyof PlasmicNewPage__ArgsType;
export const PlasmicNewPage__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPage__OverridesType = {
  root?: Flex__<"div">;
  richAppLayout?: Flex__<typeof RichLayout>;
  img?: Flex__<typeof PlasmicImg__>;
  contentfulFetcher?: Flex__<typeof ContentfulFetcher>;
  text?: Flex__<"div">;
  calendar?: Flex__<typeof RichCalendar>;
};

export interface DefaultNewPageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewPage__RenderFunc(props: {
  variants: PlasmicNewPage__VariantsArgs;
  args: PlasmicNewPage__ArgsType;
  overrides: PlasmicNewPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "calendar.mode",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "month",

        onMutate: generateOnMutateForSpec("mode", RichCalendar_Helpers)
      },
      {
        path: "calendar.selectedDate",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("selectedDate", RichCalendar_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_tailwind_3_4_colors_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <RichLayout
            data-plasmic-name={"richAppLayout"}
            data-plasmic-override={overrides.richAppLayout}
            className={classNames("__wab_instance", sty.richAppLayout)}
            layout={"side"}
            logoElement={
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/fake-logo.svg"}
              />
            }
            navMenuItems={(() => {
              const __composite = [
                { path: "/", name: "Home" },
                { routes: null, path: null, name: null }
              ];
              __composite["1"]["routes"] = (() => {
                const __composite = [{ path: null, name: null }];
                __composite["0"]["path"] = `/new-page`;
                __composite["0"]["name"] = "Test";
                return __composite;
              })();
              __composite["1"]["path"] = `/`;
              __composite["1"]["name"] = "test";
              return __composite;
            })()}
            simpleNavTheme={(() => {
              const __composite = { scheme: null, customBgColor: null };
              __composite["scheme"] = "dark";
              __composite["customBgColor"] = "var(--token-0VT9sIDxUkJx)";
              return __composite;
            })()}
            title={"BRRG"}
          >
            <div className={classNames(projectcss.all, sty.freeBox__ycOza)}>
              <ContentfulFetcher
                data-plasmic-name={"contentfulFetcher"}
                data-plasmic-override={overrides.contentfulFetcher}
                className={classNames("__wab_instance", sty.contentfulFetcher)}
                contentType={"blogPost"}
                filterField={"sequence"}
                filterValue={"1"}
                noAutoRepeat={false}
                noLayout={true}
                reverseOrder={false}
                searchParameter={"[gte]"}
              >
                <DataCtxReader__>
                  {$ctx => (
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__xRIzC
                      )}
                      component={Link}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToHomepage"] = true
                          ? (() => {
                              const actionArgs = { destination: `/` };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToHomepage"] != null &&
                          typeof $steps["goToHomepage"] === "object" &&
                          typeof $steps["goToHomepage"].then === "function"
                        ) {
                          $steps["goToHomepage"] = await $steps["goToHomepage"];
                        }
                      }}
                      platform={"nextjs"}
                      style={(() => {
                        try {
                          return undefined;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return { "background-color": "teal" };
                          }
                          throw e;
                        }
                      })()}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___3Mypq
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__r2KYj
                          )}
                        >
                          <ContentfulField
                            className={classNames(
                              "__wab_instance",
                              sty.contentfulField__ltck6
                            )}
                            objectPath={["title"]}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__aeaJe
                          )}
                        >
                          <ContentfulField
                            className={classNames(
                              "__wab_instance",
                              sty.contentfulField__dnZyF
                            )}
                            objectPath={["content"]}
                          />
                        </div>
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__hvk8B
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          <ContentfulField
                            className={classNames(
                              "__wab_instance",
                              sty.contentfulField__z3Qr
                            )}
                            objectPath={["image"]}
                          />
                        </PlasmicLink__>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kqoz6
                          )}
                        >
                          <div
                            data-plasmic-name={"text"}
                            data-plasmic-override={overrides.text}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $ctx.currentContentfulBlogPostItem
                                    .fields.category[1].fields.categoryName;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      </div>
                    </PlasmicLink__>
                  )}
                </DataCtxReader__>
              </ContentfulFetcher>
            </div>
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.calendar),
                mode: generateStateValueProp($state, ["calendar", "mode"]),
                onChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "selectedDate",
                    ["calendar", "selectedDate"],
                    RichCalendar_Helpers
                  ).apply(null, eventArgs);
                },
                onPanelChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "mode",
                    ["calendar", "mode"],
                    RichCalendar_Helpers
                  ).apply(null, eventArgs);
                },
                value: generateStateValueProp($state, [
                  "calendar",
                  "selectedDate"
                ])
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "mode",
                    plasmicStateName: "calendar.mode"
                  },
                  {
                    name: "selectedDate",
                    plasmicStateName: "calendar.selectedDate"
                  }
                ],
                [],
                RichCalendar_Helpers ?? {},
                child$Props
              );

              return (
                <RichCalendar
                  data-plasmic-name={"calendar"}
                  data-plasmic-override={overrides.calendar}
                  {...child$Props}
                />
              );
            })()}
          </RichLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "richAppLayout",
    "img",
    "contentfulFetcher",
    "text",
    "calendar"
  ],
  richAppLayout: [
    "richAppLayout",
    "img",
    "contentfulFetcher",
    "text",
    "calendar"
  ],
  img: ["img"],
  contentfulFetcher: ["contentfulFetcher", "text"],
  text: ["text"],
  calendar: ["calendar"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  richAppLayout: typeof RichLayout;
  img: typeof PlasmicImg__;
  contentfulFetcher: typeof ContentfulFetcher;
  text: "div";
  calendar: typeof RichCalendar;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPage__VariantsArgs;
    args?: PlasmicNewPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNewPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewPage__ArgProps,
          internalVariantPropNames: PlasmicNewPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPage";
  } else {
    func.displayName = `PlasmicNewPage.${nodeName}`;
  }
  return func;
}

export const PlasmicNewPage = Object.assign(
  // Top-level PlasmicNewPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    richAppLayout: makeNodeComponent("richAppLayout"),
    img: makeNodeComponent("img"),
    contentfulFetcher: makeNodeComponent("contentfulFetcher"),
    text: makeNodeComponent("text"),
    calendar: makeNodeComponent("calendar"),

    // Metadata about props expected for PlasmicNewPage
    internalVariantProps: PlasmicNewPage__VariantProps,
    internalArgProps: PlasmicNewPage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicNewPage;
/* prettier-ignore-end */
