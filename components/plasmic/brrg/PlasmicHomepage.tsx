// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: u4Y4MGpSRpZo7PLABQqvDf
// Component: 7hmTVEXMyQl1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import RadioGroup from "../../RadioGroup"; // plasmic-import: 5CDXW02Cf5r3/component
import Radio from "../../Radio"; // plasmic-import: axBQP_Si1D03/component
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdColumn } from "@plasmicpkgs/antd5/skinny/registerTable";
import { AntdPagination } from "@plasmicpkgs/antd5/skinny/registerPagination";
import { paginationHelpers as AntdPagination_Helpers } from "@plasmicpkgs/antd5/skinny/registerPagination";
import { AntdTable } from "@plasmicpkgs/antd5/skinny/registerTable";
import Modal from "../../Modal"; // plasmic-import: 0hYjdmXDMk7n/component
import Button from "../../Button"; // plasmic-import: S9bAeK-MMBaE/component
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_tailwind_3_4_colors_css from "../library_tailwind_3_4_color_tokens/plasmic.module.css"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: u4Y4MGpSRpZo7PLABQqvDf/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 7hmTVEXMyQl1/css

import BuildingBankIcon from "../library_tabler_3_2_icons/icons/PlasmicIcon__BuildingBank"; // plasmic-import: rVI3Mx606LoJ/icon
import UsersIcon from "../library_tabler_3_2_icons/icons/PlasmicIcon__Users"; // plasmic-import: JrpdS-Pm49Zg/icon
import BellXFilledIcon from "../library_tabler_3_2_icons/icons/PlasmicIcon__BellXFilled"; // plasmic-import: Xiy-K5aKl4B8/icon
import TriangleFilledIcon from "./icons/PlasmicIcon__TriangleFilled"; // plasmic-import: RpwTEpk0bivM/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: Y_V96jpGhEzm/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: -Byi7mH_H7-T/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = { fields?: any };
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>("fields");

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  navigationBar?: Flex__<typeof NavigationBar>;
  section?: Flex__<"section">;
  form?: Flex__<typeof FormWrapper>;
  type?: Flex__<typeof RadioGroup>;
  columns?: Flex__<"div">;
  individual?: Flex__<typeof Radio>;
  org?: Flex__<typeof Radio>;
  firstName?: Flex__<typeof FormItemWrapper>;
  firstNameInput?: Flex__<typeof AntdInput>;
  middleName?: Flex__<typeof FormItemWrapper>;
  input2?: Flex__<typeof AntdInput>;
  lastName?: Flex__<typeof FormItemWrapper>;
  input3?: Flex__<typeof AntdInput>;
  organization?: Flex__<typeof FormItemWrapper>;
  input4?: Flex__<typeof AntdInput>;
  maxItemsOnPage?: Flex__<typeof RadioGroup>;
  pagination?: Flex__<typeof AntdPagination>;
  table2?: Flex__<typeof AntdTable>;
  modal?: Flex__<typeof Modal>;
  form2?: Flex__<typeof FormWrapper>;
  numberInput?: Flex__<typeof AntdInputNumber>;
  input5?: Flex__<typeof AntdInput>;
  input6?: Flex__<typeof AntdInput>;
  input7?: Flex__<typeof AntdInput>;
  numberInput2?: Flex__<typeof AntdInputNumber>;
  numberInput3?: Flex__<typeof AntdInputNumber>;
  input8?: Flex__<typeof AntdInput>;
  select?: Flex__<typeof AntdSelect>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          fields: (() => {
            const __composite = [
              { title: null, dataType: null },
              { key: "id", fieldId: "id" },
              { key: "middle_name", fieldId: "middle_name" },
              { key: "last_name", fieldId: "last_name" },
              { key: "first_name", fieldId: "first_name" },
              {
                key: "created_at",
                fieldId: "created_at",
                dataType: null,
                dateStyle: null,
                timeStyle: null
              },
              { key: "type", fieldId: "type" },
              { key: "organization_name", fieldId: "organization_name" },
              {}
            ];
            __composite["0"]["title"] = "Actions";
            __composite["0"]["dataType"] = "datetime";
            __composite["5"]["dataType"] = "datetime";
            __composite["5"]["dateStyle"] = "short";
            __composite["5"]["timeStyle"] = "short";
            return __composite;
          })()
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "firstNameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "type.value",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "table2.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "table2"
      },
      {
        path: "modal.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "form2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "numberInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "numberInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "numberInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "maxItemsOnPage.value",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "pagination.currentPage",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1,

        onMutate: generateOnMutateForSpec("currentPage", AntdPagination_Helpers)
      },
      {
        path: "pagination.pageSize",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.maxItemsOnPage.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 10;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec("pageSize", AntdPagination_Helpers)
      },
      {
        path: "pagination.startIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("startIndex", AntdPagination_Helpers)
      },
      {
        path: "pagination.endIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("endIndex", AntdPagination_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "eoobQDvCJr1tPEqeRVfXLY",
        opId: "444a1ad9-bccb-46bc-8d2a-3e8e95fe35cf",
        userArgs: {
          pagination: [
            $state.pagination.currentPage,
            $state.pagination.pageSize
          ]
        },
        cacheKey: `plasmic.$.444a1ad9-bccb-46bc-8d2a-3e8e95fe35cf.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    query2: usePlasmicDataOp(() => {
      return {
        sourceId: "eoobQDvCJr1tPEqeRVfXLY",
        opId: "3bf0a25e-e0ff-430d-8f43-e2d0ec431238",
        userArgs: {},
        cacheKey: `plasmic.$.3bf0a25e-e0ff-430d-8f43-e2d0ec431238.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_tailwind_3_4_colors_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            brand={
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__cuXpn
                )}
                component={Link}
                href={"#"}
                platform={"nextjs"}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__yrM9E)}
                  displayHeight={"40px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={"https://static1.plasmic.app/nav-logo-placeholder.svg"}
                />
              </PlasmicLink__>
            }
            className={classNames("__wab_instance", sty.navigationBar)}
            closeButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__z3JmK)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/close.svg"}
              />
            }
            itemsGap={8}
            menuItems={
              <React.Fragment>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__enPpg
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                >
                  {"Home"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__jZCz
                  )}
                  component={Link}
                  href={`/new-page`}
                  platform={"nextjs"}
                >
                  {"About"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__ye6Ck
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                >
                  {"Contact"}
                </PlasmicLink__>
              </React.Fragment>
            }
            openButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__uIakJ)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/menu.svg"}
              />
            }
            responsiveBreakpoint={768}
          />

          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___6FwEh
              )}
            >
              {"New Contact Entry"}
            </div>
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.form),
                extendedOnValuesChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["form", "value"],
                    FormWrapper_Helpers
                  ).apply(null, eventArgs);
                },
                formItems: [
                  { label: "Name", name: "name", inputType: "Text" },
                  { label: "Message", name: "message", inputType: "Text Area" }
                ],
                labelCol: { span: 8, horizontalOnly: true },
                layout: "vertical",
                mode: "advanced",
                onFinish: async values => {
                  const $steps = {};

                  $steps["defaultSubmit"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "eoobQDvCJr1tPEqeRVfXLY",
                            opId: "ab9f43f6-acb4-43de-8bef-9d3cb8dad03e",
                            userArgs: {
                              variables: [
                                $state.type.value,
                                first_name.value,
                                last_name.value,
                                $state.type.value == 1
                                  ? null
                                  : organization_name.value
                              ]
                            },
                            cacheKey: null,
                            invalidatedKeys: ["plasmic_refresh_all"],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["defaultSubmit"] != null &&
                    typeof $steps["defaultSubmit"] === "object" &&
                    typeof $steps["defaultSubmit"].then === "function"
                  ) {
                    $steps["defaultSubmit"] = await $steps["defaultSubmit"];
                  }
                },
                onIsSubmittingChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "isSubmitting",
                    ["form", "isSubmitting"],
                    FormWrapper_Helpers
                  ).apply(null, eventArgs);
                },
                ref: ref => {
                  $refs["form"] = ref;
                },
                submitSlot: null,
                wrapperCol: { span: 16, horizontalOnly: true }
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "form.value"
                  },
                  {
                    name: "isSubmitting",
                    plasmicStateName: "form.isSubmitting"
                  }
                ],
                [],
                FormWrapper_Helpers ?? {},
                child$Props
              );

              return (
                <FormWrapper
                  data-plasmic-name={"form"}
                  data-plasmic-override={overrides.form}
                  {...child$Props}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___0OeUl)}
                  >
                    <RadioGroup
                      data-plasmic-name={"type"}
                      data-plasmic-override={overrides.type}
                      className={classNames("__wab_instance", sty.type)}
                      defaultValue={"2"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__a765R
                          )}
                        >
                          {"Contact Type"}
                        </div>
                      }
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "type",
                          "value"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      options={
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"columns"}
                          data-plasmic-override={overrides.columns}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.columns)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__ltIJv
                            )}
                          >
                            <Radio
                              data-plasmic-name={"individual"}
                              data-plasmic-override={overrides.individual}
                              className={classNames(
                                "__wab_instance",
                                sty.individual
                              )}
                              label={"Individual"}
                              value={"1"}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__orZxi
                            )}
                          >
                            <Radio
                              data-plasmic-name={"org"}
                              data-plasmic-override={overrides.org}
                              className={classNames("__wab_instance", sty.org)}
                              label={"Organization"}
                              value={"2"}
                            />
                          </div>
                        </Stack__>
                      }
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___0Klh)}
                  >
                    {(() => {
                      try {
                        return $state.type.value == 2;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <BuildingBankIcon
                        className={classNames(projectcss.all, sty.svg__gZmO)}
                        role={"img"}
                      />
                    ) : null}
                    {(() => {
                      try {
                        return $state.type.value == 1;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <UsersIcon
                        className={classNames(projectcss.all, sty.svg__sDvUd)}
                        role={"img"}
                      />
                    ) : null}
                  </div>
                  <FormItemWrapper
                    data-plasmic-name={"firstName"}
                    data-plasmic-override={overrides.firstName}
                    className={classNames("__wab_instance", sty.firstName)}
                    initialValue={undefined}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ycgt5
                        )}
                      >
                        {"First Name"}
                      </div>
                    }
                    name={"first_name"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames(
                          "__wab_instance",
                          sty.firstNameInput
                        ),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["firstNameInput", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);

                          (async event => {
                            const $steps = {};
                          }).apply(null, eventArgs);
                        },
                        value: generateStateValueProp($state, [
                          "firstNameInput",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "firstNameInput.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"firstNameInput"}
                          data-plasmic-override={overrides.firstNameInput}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <FormItemWrapper
                    data-plasmic-name={"middleName"}
                    data-plasmic-override={overrides.middleName}
                    className={classNames("__wab_instance", sty.middleName)}
                    initialValue={undefined}
                    label={"Middle Name"}
                    name={"middle_name"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input2),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input2", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        value: generateStateValueProp($state, [
                          "input2",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input2.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input2"}
                          data-plasmic-override={overrides.input2}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <FormItemWrapper
                    data-plasmic-name={"lastName"}
                    data-plasmic-override={overrides.lastName}
                    className={classNames("__wab_instance", sty.lastName)}
                    initialValue={undefined}
                    label={"Last Name"}
                    name={"last_name"}
                    rules={[
                      { ruleType: "required", options: [] },

                      { ruleType: "required" }
                    ]}
                  >
                    {(() => {
                      const child$Props = {
                        allowClear: true,
                        className: classNames("__wab_instance", sty.input3),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input3", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        placeholder: ``,
                        type: "tel",
                        value: generateStateValueProp($state, [
                          "input3",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input3.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input3"}
                          data-plasmic-override={overrides.input3}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  {(() => {
                    try {
                      return $state.type.value == 2;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <FormItemWrapper
                      data-plasmic-name={"organization"}
                      data-plasmic-override={overrides.organization}
                      className={classNames("__wab_instance", sty.organization)}
                      initialValue={""}
                      label={"Organization Name"}
                      name={"organization_name"}
                      rules={[]}
                    >
                      {(() => {
                        const child$Props = {
                          allowClear: true,
                          className: classNames("__wab_instance", sty.input4),
                          maxLength: 10,
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input4", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);

                            (async event => {
                              const $steps = {};

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return $state.form.value.organization_name
                                          .replace(/\D/g, "") // Remove non-numeric characters
                                          .replace(
                                            /(\d{3})(\d{3})(\d{4})/,
                                            "($1) $2-$3"
                                          );
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                            }).apply(null, eventArgs);
                          },
                          type: "tel",
                          value: generateStateValueProp($state, [
                            "input4",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input4.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input4"}
                            data-plasmic-override={overrides.input4}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                  ) : null}
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__qcQvt)}
                    submitsForm={true}
                    type={"primary"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__u1Llv
                      )}
                    >
                      {"Submit"}
                    </div>
                  </AntdButton>
                </FormWrapper>
              );
            })()}
          </section>
          <div className={classNames(projectcss.all, sty.freeBox__rg4I)}>
            <RadioGroup
              data-plasmic-name={"maxItemsOnPage"}
              data-plasmic-override={overrides.maxItemsOnPage}
              className={classNames("__wab_instance", sty.maxItemsOnPage)}
              defaultValue={"10"}
              label={"Items to Show"}
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "maxItemsOnPage",
                  "value"
                ]).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              options={
                <div
                  className={classNames(projectcss.all, sty.freeBox___6KvPt)}
                >
                  <Radio
                    className={classNames("__wab_instance", sty.radio__rZxgn)}
                    label={"5"}
                    value={"5"}
                  />

                  <Radio
                    className={classNames("__wab_instance", sty.radio___7MwoS)}
                    label={"10"}
                    value={"10"}
                  />

                  <Radio
                    className={classNames("__wab_instance", sty.radio__sffJk)}
                    label={"20"}
                    value={"20"}
                  />
                </div>
              }
            />
          </div>
          <AntdColumn
            className={classNames("__wab_instance", sty.column__q4XOr)}
            title={"Column Name"}
          />

          {(() => {
            const child$Props = {
              className: classNames("__wab_instance", sty.pagination),
              current: generateStateValueProp($state, [
                "pagination",
                "currentPage"
              ]),
              defaultCurrent: 1,
              defaultPageSize: (() => {
                try {
                  return $state.maxItemsOnPage.value;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return 10;
                  }
                  throw e;
                }
              })(),
              onChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "currentPage",
                  ["pagination", "currentPage"],
                  AntdPagination_Helpers
                ).apply(null, eventArgs);
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "startIndex",
                  ["pagination", "startIndex"],
                  AntdPagination_Helpers
                ).apply(null, eventArgs);
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "endIndex",
                  ["pagination", "endIndex"],
                  AntdPagination_Helpers
                ).apply(null, eventArgs);
              },
              onShowSizeChange: async (...eventArgs: any) => {
                generateStateOnChangePropForCodeComponents(
                  $state,
                  "pageSize",
                  ["pagination", "pageSize"],
                  AntdPagination_Helpers
                ).apply(null, eventArgs);
              },
              pageSize: generateStateValueProp($state, [
                "pagination",
                "pageSize"
              ]),
              pageSizeOptions: [
                { pageSize: 10 },
                { pageSize: 20 },
                { pageSize: 50 },
                { pageSize: 100 }
              ],
              total: (() => {
                try {
                  return $queries.query2.data[0].count;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()
            };
            initializeCodeComponentStates(
              $state,
              [
                {
                  name: "currentPage",
                  plasmicStateName: "pagination.currentPage"
                },
                {
                  name: "pageSize",
                  plasmicStateName: "pagination.pageSize"
                },
                {
                  name: "startIndex",
                  plasmicStateName: "pagination.startIndex"
                },
                {
                  name: "endIndex",
                  plasmicStateName: "pagination.endIndex"
                }
              ],
              [],
              AntdPagination_Helpers ?? {},
              child$Props
            );

            return (
              <AntdPagination
                data-plasmic-name={"pagination"}
                data-plasmic-override={overrides.pagination}
                {...child$Props}
              />
            );
          })()}
          <AntdTable
            data-plasmic-name={"table2"}
            data-plasmic-override={overrides.table2}
            bordered={false}
            className={classNames("__wab_instance", sty.table2)}
            data={(() => {
              try {
                return $queries.query;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            isSelectable={"single"}
            onSelectedRowKeysChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "table2",
                "selectedRowKeys"
              ]).apply(null, eventArgs);
            }}
            ref={ref => {
              $refs["table2"] = ref;
            }}
            rowKey={"id"}
            selectedRowKeys={generateStateValueProp($state, [
              "table2",
              "selectedRowKeys"
            ])}
          >
            <AntdColumn
              className={classNames("__wab_instance", sty.column__b07Tl)}
              dataIndex={"first_name"}
              render={(cell: any, row: any, index: any) => (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8BHmp
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $queries.query.first_name;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              )}
              title={"First Name"}
            />

            <AntdColumn
              className={classNames("__wab_instance", sty.column__mnWfz)}
              dataIndex={"first_name"}
              title={"First Name"}
            />

            <AntdColumn
              className={classNames("__wab_instance", sty.column__j37Na)}
              dataIndex={"organization_name"}
              title={"Organization"}
            />

            <AntdColumn
              className={classNames("__wab_instance", sty.column___6Vx4X)}
              render={(cell: any, row: any, index: any) => (
                <React.Fragment>
                  {(() => {
                    try {
                      return row.type == 2;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <BellXFilledIcon
                      className={classNames(projectcss.all, sty.svg__opive)}
                      role={"img"}
                    />
                  ) : null}
                  {(() => {
                    try {
                      return row.type == 1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <TriangleFilledIcon
                      className={classNames(projectcss.all, sty.svg__tlRrp)}
                      role={"img"}
                    />
                  ) : null}
                </React.Fragment>
              )}
              title={"Type"}
            />

            <AntdColumn
              className={classNames("__wab_instance", sty.column___1FiAs)}
              render={(cell: any, row: any, index: any) => (
                <Modal
                  data-plasmic-name={"modal"}
                  data-plasmic-override={overrides.modal}
                  className={classNames("__wab_instance", sty.modal)}
                  content={
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__gwyRh)}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.form2),
                          extendedOnValuesChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["form2", "value"],
                              FormWrapper_Helpers
                            ).apply(null, eventArgs);
                          },
                          formItems: [
                            { label: "Name", name: "name", inputType: "Text" },
                            {
                              label: "Message",
                              name: "message",
                              inputType: "Text Area"
                            }
                          ],
                          labelCol: { span: 8, horizontalOnly: true },
                          layout: "vertical",
                          mode: "advanced",
                          onFinish: async values => {
                            const $steps = {};

                            $steps["defaultSubmit"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: {
                                      sourceId: "eoobQDvCJr1tPEqeRVfXLY",
                                      opId: "4a2905b3-80f2-4fae-a616-d98d415c0565",
                                      userArgs: {
                                        variables: [
                                          $state.selectedRow.id,
                                          $state.selectedRow.id,
                                          $state.form2.value.phone_number
                                        ]
                                      },
                                      cacheKey: null,
                                      invalidatedKeys: ["plasmic_refresh_all"],
                                      roleId: null
                                    }
                                  };
                                  return (async ({
                                    dataOp,
                                    continueOnError
                                  }) => {
                                    try {
                                      const response =
                                        await executePlasmicDataOp(dataOp, {
                                          userAuthToken:
                                            dataSourcesCtx?.userAuthToken,
                                          user: dataSourcesCtx?.user
                                        });
                                      await plasmicInvalidate(
                                        dataOp.invalidatedKeys
                                      );
                                      return response;
                                    } catch (e) {
                                      if (!continueOnError) {
                                        throw e;
                                      }
                                      return e;
                                    }
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["defaultSubmit"] != null &&
                              typeof $steps["defaultSubmit"] === "object" &&
                              typeof $steps["defaultSubmit"].then === "function"
                            ) {
                              $steps["defaultSubmit"] = await $steps[
                                "defaultSubmit"
                              ];
                            }
                          },
                          onIsSubmittingChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "isSubmitting",
                              ["form2", "isSubmitting"],
                              FormWrapper_Helpers
                            ).apply(null, eventArgs);
                          },
                          ref: ref => {
                            $refs["form2"] = ref;
                          },
                          submitSlot: null,
                          wrapperCol: { span: 16, horizontalOnly: true }
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "form2.value"
                            },
                            {
                              name: "isSubmitting",
                              plasmicStateName: "form2.isSubmitting"
                            }
                          ],
                          [],
                          FormWrapper_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <FormWrapper
                            data-plasmic-name={"form2"}
                            data-plasmic-override={overrides.form2}
                            {...child$Props}
                          >
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__jt1T
                              )}
                              hidden={true}
                              initialValue={undefined}
                              label={"id"}
                              name={"id"}
                            >
                              <AntdInputNumber
                                data-plasmic-name={"numberInput"}
                                data-plasmic-override={overrides.numberInput}
                                className={classNames(
                                  "__wab_instance",
                                  sty.numberInput
                                )}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "numberInput",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                type={"number"}
                                value={generateStateValueProp($state, [
                                  "numberInput",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__mNUc
                              )}
                              initialValue={undefined}
                              label={"phone_number"}
                              name={"phone_number"}
                              rules={[]}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input5
                                  ),
                                  onChange: async (...eventArgs: any) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input5", "value"],
                                      AntdInput_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  type: "tel",
                                  value: generateStateValueProp($state, [
                                    "input5",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input5.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input5"}
                                    data-plasmic-override={overrides.input5}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField___84N6M
                              )}
                              hidden={true}
                              initialValue={undefined}
                              label={"contact_number"}
                              name={"contact_number"}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input6
                                  ),
                                  onChange: async (...eventArgs: any) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input6", "value"],
                                      AntdInput_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  value: generateStateValueProp($state, [
                                    "input6",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input6.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input6"}
                                    data-plasmic-override={overrides.input6}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__pD6
                              )}
                              hidden={true}
                              initialValue={undefined}
                              label={"created_at"}
                              name={"created_at"}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input7
                                  ),
                                  onChange: async (...eventArgs: any) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input7", "value"],
                                      AntdInput_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  value: generateStateValueProp($state, [
                                    "input7",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input7.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input7"}
                                    data-plasmic-override={overrides.input7}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__srejd
                              )}
                              hidden={true}
                              initialValue={undefined}
                              label={"contact_id"}
                              name={"contact_id"}
                            >
                              <AntdInputNumber
                                data-plasmic-name={"numberInput2"}
                                data-plasmic-override={overrides.numberInput2}
                                className={classNames(
                                  "__wab_instance",
                                  sty.numberInput2
                                )}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "numberInput2",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                type={"number"}
                                value={generateStateValueProp($state, [
                                  "numberInput2",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__wSk4
                              )}
                              initialValue={undefined}
                              label={"type"}
                              name={"type"}
                            >
                              <AntdInputNumber
                                data-plasmic-name={"numberInput3"}
                                data-plasmic-override={overrides.numberInput3}
                                className={classNames(
                                  "__wab_instance",
                                  sty.numberInput3
                                )}
                                onChange={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "numberInput3",
                                    "value"
                                  ]).apply(null, eventArgs);
                                }}
                                type={"number"}
                                value={generateStateValueProp($state, [
                                  "numberInput3",
                                  "value"
                                ])}
                              />
                            </FormItemWrapper>
                            <FormItemWrapper
                              className={classNames(
                                "__wab_instance",
                                sty.formField__m7T2M
                              )}
                              hidden={true}
                              initialValue={undefined}
                              label={"time_created"}
                              name={"time_created"}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.input8
                                  ),
                                  onChange: async (...eventArgs: any) => {
                                    generateStateOnChangePropForCodeComponents(
                                      $state,
                                      "value",
                                      ["input8", "value"],
                                      AntdInput_Helpers
                                    ).apply(null, eventArgs);
                                  },
                                  value: generateStateValueProp($state, [
                                    "input8",
                                    "value"
                                  ])
                                };
                                initializeCodeComponentStates(
                                  $state,
                                  [
                                    {
                                      name: "value",
                                      plasmicStateName: "input8.value"
                                    }
                                  ],
                                  [],
                                  AntdInput_Helpers ?? {},
                                  child$Props
                                );

                                return (
                                  <AntdInput
                                    data-plasmic-name={"input8"}
                                    data-plasmic-override={overrides.input8}
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </FormItemWrapper>
                            <AntdButton
                              className={classNames(
                                "__wab_instance",
                                sty.button__xOrLb
                              )}
                              submitsForm={true}
                              type={"primary"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__dQvV
                                )}
                              >
                                {"Submit"}
                              </div>
                            </AntdButton>
                          </FormWrapper>
                        );
                      })()}
                    </Stack__>
                  }
                  heading={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__piLWo
                      )}
                    >
                      {"Add Phone Number"}
                    </div>
                  }
                  isOpen={generateStateValueProp($state, ["modal", "isOpen"])}
                  onOpenChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "modal",
                      "isOpen"
                    ]).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }

                    (async val => {
                      const $steps = {};

                      $steps["updateSelectedRow"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["selectedRow"]
                              },
                              operation: 0,
                              value: row
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateSelectedRow"] != null &&
                        typeof $steps["updateSelectedRow"] === "object" &&
                        typeof $steps["updateSelectedRow"].then === "function"
                      ) {
                        $steps["updateSelectedRow"] = await $steps[
                          "updateSelectedRow"
                        ];
                      }
                    }).apply(null, eventArgs);
                  }}
                />
              )}
              title={"Link"}
            />
          </AntdTable>
          <AntdSelect
            data-plasmic-name={"select"}
            data-plasmic-override={overrides.select}
            className={classNames("__wab_instance", sty.select)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_library_tailwind_3_4_colors_css.plasmic_tokens,
              plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            mode={"tags"}
            onChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["select", "value"]).apply(
                null,
                eventArgs
              );
            }}
            options={(() => {
              try {
                return $queries.query.data.map(row => ({
                  value: row.id,
                  label: row.first_name
                }));
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [
                    { value: "option1", label: "Option 1", type: "option" },
                    { value: "option2", label: "Option 2", type: "option" }
                  ];
                }
                throw e;
              }
            })()}
            placeholder={"Select..."}
            popupScopeClassName={sty["select__popup"]}
            size={"large"}
            value={generateStateValueProp($state, ["select", "value"])}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navigationBar",
    "section",
    "form",
    "type",
    "columns",
    "individual",
    "org",
    "firstName",
    "firstNameInput",
    "middleName",
    "input2",
    "lastName",
    "input3",
    "organization",
    "input4",
    "maxItemsOnPage",
    "pagination",
    "table2",
    "modal",
    "form2",
    "numberInput",
    "input5",
    "input6",
    "input7",
    "numberInput2",
    "numberInput3",
    "input8",
    "select"
  ],
  navigationBar: ["navigationBar"],
  section: [
    "section",
    "form",
    "type",
    "columns",
    "individual",
    "org",
    "firstName",
    "firstNameInput",
    "middleName",
    "input2",
    "lastName",
    "input3",
    "organization",
    "input4"
  ],
  form: [
    "form",
    "type",
    "columns",
    "individual",
    "org",
    "firstName",
    "firstNameInput",
    "middleName",
    "input2",
    "lastName",
    "input3",
    "organization",
    "input4"
  ],
  type: ["type", "columns", "individual", "org"],
  columns: ["columns", "individual", "org"],
  individual: ["individual"],
  org: ["org"],
  firstName: ["firstName", "firstNameInput"],
  firstNameInput: ["firstNameInput"],
  middleName: ["middleName", "input2"],
  input2: ["input2"],
  lastName: ["lastName", "input3"],
  input3: ["input3"],
  organization: ["organization", "input4"],
  input4: ["input4"],
  maxItemsOnPage: ["maxItemsOnPage"],
  pagination: ["pagination"],
  table2: [
    "table2",
    "modal",
    "form2",
    "numberInput",
    "input5",
    "input6",
    "input7",
    "numberInput2",
    "numberInput3",
    "input8"
  ],
  modal: [
    "modal",
    "form2",
    "numberInput",
    "input5",
    "input6",
    "input7",
    "numberInput2",
    "numberInput3",
    "input8"
  ],
  form2: [
    "form2",
    "numberInput",
    "input5",
    "input6",
    "input7",
    "numberInput2",
    "numberInput3",
    "input8"
  ],
  numberInput: ["numberInput"],
  input5: ["input5"],
  input6: ["input6"],
  input7: ["input7"],
  numberInput2: ["numberInput2"],
  numberInput3: ["numberInput3"],
  input8: ["input8"],
  select: ["select"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  section: "section";
  form: typeof FormWrapper;
  type: typeof RadioGroup;
  columns: "div";
  individual: typeof Radio;
  org: typeof Radio;
  firstName: typeof FormItemWrapper;
  firstNameInput: typeof AntdInput;
  middleName: typeof FormItemWrapper;
  input2: typeof AntdInput;
  lastName: typeof FormItemWrapper;
  input3: typeof AntdInput;
  organization: typeof FormItemWrapper;
  input4: typeof AntdInput;
  maxItemsOnPage: typeof RadioGroup;
  pagination: typeof AntdPagination;
  table2: typeof AntdTable;
  modal: typeof Modal;
  form2: typeof FormWrapper;
  numberInput: typeof AntdInputNumber;
  input5: typeof AntdInput;
  input6: typeof AntdInput;
  input7: typeof AntdInput;
  numberInput2: typeof AntdInputNumber;
  numberInput3: typeof AntdInputNumber;
  input8: typeof AntdInput;
  select: typeof AntdSelect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    section: makeNodeComponent("section"),
    form: makeNodeComponent("form"),
    type: makeNodeComponent("type"),
    columns: makeNodeComponent("columns"),
    individual: makeNodeComponent("individual"),
    org: makeNodeComponent("org"),
    firstName: makeNodeComponent("firstName"),
    firstNameInput: makeNodeComponent("firstNameInput"),
    middleName: makeNodeComponent("middleName"),
    input2: makeNodeComponent("input2"),
    lastName: makeNodeComponent("lastName"),
    input3: makeNodeComponent("input3"),
    organization: makeNodeComponent("organization"),
    input4: makeNodeComponent("input4"),
    maxItemsOnPage: makeNodeComponent("maxItemsOnPage"),
    pagination: makeNodeComponent("pagination"),
    table2: makeNodeComponent("table2"),
    modal: makeNodeComponent("modal"),
    form2: makeNodeComponent("form2"),
    numberInput: makeNodeComponent("numberInput"),
    input5: makeNodeComponent("input5"),
    input6: makeNodeComponent("input6"),
    input7: makeNodeComponent("input7"),
    numberInput2: makeNodeComponent("numberInput2"),
    numberInput3: makeNodeComponent("numberInput3"),
    input8: makeNodeComponent("input8"),
    select: makeNodeComponent("select"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
