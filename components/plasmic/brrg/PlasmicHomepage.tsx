// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: u4Y4MGpSRpZo7PLABQqvDf
// Component: 7hmTVEXMyQl1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import RadioGroup from "../../RadioGroup"; // plasmic-import: 5CDXW02Cf5r3/component
import Radio from "../../Radio"; // plasmic-import: axBQP_Si1D03/component
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { AntdColumn } from "@plasmicpkgs/antd5/skinny/registerTable";
import { AntdTable } from "@plasmicpkgs/antd5/skinny/registerTable";
import Button from "../../Button"; // plasmic-import: S9bAeK-MMBaE/component
import Modal from "../../Modal"; // plasmic-import: 0hYjdmXDMk7n/component
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_tailwind_3_4_colors_css from "../library_tailwind_3_4_color_tokens/plasmic.module.css"; // plasmic-import: 5ZtnypMovRHeeP3YTdPCYL/projectcss
import plasmic_library_tailwind_3_4_number_tokens_css from "../library_tailwind_3_4_number_tokens/plasmic.module.css"; // plasmic-import: 4vjRXvnb4XuY6J15w9oRcQ/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: u4Y4MGpSRpZo7PLABQqvDf/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 7hmTVEXMyQl1/css

import BuildingBankIcon from "../library_tabler_3_2_icons/icons/PlasmicIcon__BuildingBank"; // plasmic-import: rVI3Mx606LoJ/icon
import UsersIcon from "../library_tabler_3_2_icons/icons/PlasmicIcon__Users"; // plasmic-import: JrpdS-Pm49Zg/icon
import BellXFilledIcon from "../library_tabler_3_2_icons/icons/PlasmicIcon__BellXFilled"; // plasmic-import: Xiy-K5aKl4B8/icon
import TriangleFilledIcon from "./icons/PlasmicIcon__TriangleFilled"; // plasmic-import: RpwTEpk0bivM/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: Y_V96jpGhEzm/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: -Byi7mH_H7-T/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {
  fields?: any;
};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>("fields");

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  navigationBar?: Flex__<typeof NavigationBar>;
  section?: Flex__<"section">;
  form?: Flex__<typeof FormWrapper>;
  type?: Flex__<typeof RadioGroup>;
  columns?: Flex__<"div">;
  individual?: Flex__<typeof Radio>;
  org?: Flex__<typeof Radio>;
  firstName?: Flex__<typeof FormItemWrapper>;
  input?: Flex__<typeof AntdInput>;
  middleName?: Flex__<typeof FormItemWrapper>;
  input2?: Flex__<typeof AntdInput>;
  lastName?: Flex__<typeof FormItemWrapper>;
  input3?: Flex__<typeof AntdInput>;
  organization?: Flex__<typeof FormItemWrapper>;
  input4?: Flex__<typeof AntdInput>;
  table2?: Flex__<typeof AntdTable>;
  modal?: Flex__<typeof Modal>;
  h3?: Flex__<"h3">;
  select?: Flex__<typeof AntdSelect>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          fields: (() => {
            const __composite = [
              { title: null, dataType: null },
              { key: "id", fieldId: "id" },
              { key: "middle_name", fieldId: "middle_name" },
              { key: "last_name", fieldId: "last_name" },
              { key: "first_name", fieldId: "first_name" },
              {
                key: "created_at",
                fieldId: "created_at",
                dataType: null,
                dateStyle: null,
                timeStyle: null
              },
              { key: "type", fieldId: "type" },
              { key: "organization_name", fieldId: "organization_name" },
              {}
            ];
            __composite["0"]["title"] = "Actions";
            __composite["0"]["dataType"] = "datetime";
            __composite["5"]["dataType"] = "datetime";
            __composite["5"]["dateStyle"] = "short";
            __composite["5"]["timeStyle"] = "short";
            return __composite;
          })()
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "type.value",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "table2.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "table2"
      },
      {
        path: "modal.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "eoobQDvCJr1tPEqeRVfXLY",
        opId: "5a312628-2897-4da9-987f-5258e6143170",
        userArgs: {},
        cacheKey: `plasmic.$.5a312628-2897-4da9-987f-5258e6143170.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_tailwind_3_4_colors_css.plasmic_tokens,
            plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            brand={
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__cuXpn
                )}
                component={Link}
                href={"#"}
                platform={"nextjs"}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__yrM9E)}
                  displayHeight={"40px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  src={"https://static1.plasmic.app/nav-logo-placeholder.svg"}
                />
              </PlasmicLink__>
            }
            className={classNames("__wab_instance", sty.navigationBar)}
            closeButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__z3JmK)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/close.svg"}
              />
            }
            itemsGap={8}
            menuItems={
              <React.Fragment>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__enPpg
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                >
                  {"Home"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__jZCz
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                >
                  {"About"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__ye6Ck
                  )}
                  component={Link}
                  href={"/"}
                  platform={"nextjs"}
                >
                  {"Contact"}
                </PlasmicLink__>
              </React.Fragment>
            }
            openButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__uIakJ)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={"https://static1.plasmic.app/menu.svg"}
              />
            }
            responsiveBreakpoint={768}
          />

          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___6FwEh
              )}
            >
              {"New Contact Entry"}
            </div>
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.form),
                extendedOnValuesChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["form", "value"],
                    FormWrapper_Helpers
                  ).apply(null, eventArgs);
                },
                formItems: [
                  { label: "Name", name: "name", inputType: "Text" },
                  { label: "Message", name: "message", inputType: "Text Area" }
                ],
                labelCol: { span: 8, horizontalOnly: true },
                layout: "vertical",
                mode: "advanced",
                onFinish: async values => {
                  const $steps = {};

                  $steps["defaultSubmit"] = true
                    ? (() => {
                        const actionArgs = {
                          dataOp: {
                            sourceId: "eoobQDvCJr1tPEqeRVfXLY",
                            opId: "ab9f43f6-acb4-43de-8bef-9d3cb8dad03e",
                            userArgs: {
                              variables: [
                                $state.type.value,
                                first_name.value,
                                last_name.value,
                                $state.type.value == 1
                                  ? null
                                  : organization_name.value
                              ]
                            },
                            cacheKey: null,
                            invalidatedKeys: ["plasmic_refresh_all"],
                            roleId: null
                          }
                        };
                        return (async ({ dataOp, continueOnError }) => {
                          try {
                            const response = await executePlasmicDataOp(
                              dataOp,
                              {
                                userAuthToken: dataSourcesCtx?.userAuthToken,
                                user: dataSourcesCtx?.user
                              }
                            );
                            await plasmicInvalidate(dataOp.invalidatedKeys);
                            return response;
                          } catch (e) {
                            if (!continueOnError) {
                              throw e;
                            }
                            return e;
                          }
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["defaultSubmit"] != null &&
                    typeof $steps["defaultSubmit"] === "object" &&
                    typeof $steps["defaultSubmit"].then === "function"
                  ) {
                    $steps["defaultSubmit"] = await $steps["defaultSubmit"];
                  }
                },
                onIsSubmittingChange: async (...eventArgs: any) => {
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "isSubmitting",
                    ["form", "isSubmitting"],
                    FormWrapper_Helpers
                  ).apply(null, eventArgs);
                },
                ref: ref => {
                  $refs["form"] = ref;
                },
                submitSlot: null,
                wrapperCol: { span: 16, horizontalOnly: true }
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "form.value"
                  },
                  {
                    name: "isSubmitting",
                    plasmicStateName: "form.isSubmitting"
                  }
                ],
                [],
                FormWrapper_Helpers ?? {},
                child$Props
              );

              return (
                <FormWrapper
                  data-plasmic-name={"form"}
                  data-plasmic-override={overrides.form}
                  {...child$Props}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___0OeUl)}
                  >
                    <RadioGroup
                      data-plasmic-name={"type"}
                      data-plasmic-override={overrides.type}
                      className={classNames("__wab_instance", sty.type)}
                      defaultValue={"2"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__a765R
                          )}
                        >
                          {"Contact Type"}
                        </div>
                      }
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "type",
                          "value"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      options={
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"columns"}
                          data-plasmic-override={overrides.columns}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.columns)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__ltIJv
                            )}
                          >
                            <Radio
                              data-plasmic-name={"individual"}
                              data-plasmic-override={overrides.individual}
                              className={classNames(
                                "__wab_instance",
                                sty.individual
                              )}
                              label={"Individual"}
                              value={"1"}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__orZxi
                            )}
                          >
                            <Radio
                              data-plasmic-name={"org"}
                              data-plasmic-override={overrides.org}
                              className={classNames("__wab_instance", sty.org)}
                              label={"Organization"}
                              value={"2"}
                            />
                          </div>
                        </Stack__>
                      }
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___0Klh)}
                  >
                    {(() => {
                      try {
                        return $state.type.value == 2;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <BuildingBankIcon
                        className={classNames(projectcss.all, sty.svg__gZmO)}
                        role={"img"}
                      />
                    ) : null}
                    {(() => {
                      try {
                        return $state.type.value == 1;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <UsersIcon
                        className={classNames(projectcss.all, sty.svg__sDvUd)}
                        role={"img"}
                      />
                    ) : null}
                  </div>
                  <FormItemWrapper
                    data-plasmic-name={"firstName"}
                    data-plasmic-override={overrides.firstName}
                    className={classNames("__wab_instance", sty.firstName)}
                    initialValue={undefined}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ycgt5
                        )}
                      >
                        {"First Name"}
                      </div>
                    }
                    name={"first_name"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        value: generateStateValueProp($state, [
                          "input",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input"}
                          data-plasmic-override={overrides.input}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <FormItemWrapper
                    data-plasmic-name={"middleName"}
                    data-plasmic-override={overrides.middleName}
                    className={classNames("__wab_instance", sty.middleName)}
                    initialValue={undefined}
                    label={"Middle Name"}
                    name={"middle_name"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input2),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input2", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        value: generateStateValueProp($state, [
                          "input2",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input2.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input2"}
                          data-plasmic-override={overrides.input2}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  <FormItemWrapper
                    data-plasmic-name={"lastName"}
                    data-plasmic-override={overrides.lastName}
                    className={classNames("__wab_instance", sty.lastName)}
                    initialValue={undefined}
                    label={"Last Name"}
                    name={"last_name"}
                  >
                    {(() => {
                      const child$Props = {
                        className: classNames("__wab_instance", sty.input3),
                        onChange: async (...eventArgs: any) => {
                          generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input3", "value"],
                            AntdInput_Helpers
                          ).apply(null, eventArgs);
                        },
                        value: generateStateValueProp($state, [
                          "input3",
                          "value"
                        ])
                      };
                      initializeCodeComponentStates(
                        $state,
                        [
                          {
                            name: "value",
                            plasmicStateName: "input3.value"
                          }
                        ],
                        [],
                        AntdInput_Helpers ?? {},
                        child$Props
                      );

                      return (
                        <AntdInput
                          data-plasmic-name={"input3"}
                          data-plasmic-override={overrides.input3}
                          {...child$Props}
                        />
                      );
                    })()}
                  </FormItemWrapper>
                  {(() => {
                    try {
                      return $state.type.value == 2;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <FormItemWrapper
                      data-plasmic-name={"organization"}
                      data-plasmic-override={overrides.organization}
                      className={classNames("__wab_instance", sty.organization)}
                      initialValue={""}
                      label={"Organization Name"}
                      name={"organization_name"}
                    >
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.input4),
                          onChange: async (...eventArgs: any) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "value",
                              ["input4", "value"],
                              AntdInput_Helpers
                            ).apply(null, eventArgs);
                          },
                          value: generateStateValueProp($state, [
                            "input4",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input4.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input4"}
                            data-plasmic-override={overrides.input4}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                  ) : null}
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__qcQvt)}
                    submitsForm={true}
                    type={"primary"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__u1Llv
                      )}
                    >
                      {"Submit"}
                    </div>
                  </AntdButton>
                </FormWrapper>
              );
            })()}
          </section>
          <AntdColumn
            className={classNames("__wab_instance", sty.column__q4XOr)}
            title={"Column Name"}
          />

          <AntdTable
            data-plasmic-name={"table2"}
            data-plasmic-override={overrides.table2}
            className={classNames("__wab_instance", sty.table2)}
            data={(() => {
              try {
                return $queries.query;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            isSelectable={"single"}
            onSelectedRowKeysChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, [
                "table2",
                "selectedRowKeys"
              ]).apply(null, eventArgs);
            }}
            ref={ref => {
              $refs["table2"] = ref;
            }}
            rowKey={"id"}
            selectedRowKeys={generateStateValueProp($state, [
              "table2",
              "selectedRowKeys"
            ])}
          >
            <AntdColumn
              className={classNames("__wab_instance", sty.column__b07Tl)}
              dataIndex={"id"}
              title={"First Name"}
            />

            <AntdColumn
              className={classNames("__wab_instance", sty.column__mnWfz)}
              dataIndex={"first_name"}
              title={"First Name"}
            />

            <AntdColumn
              className={classNames("__wab_instance", sty.column__j37Na)}
              dataIndex={"organization_name"}
              title={"Organization"}
            />

            <AntdColumn
              className={classNames("__wab_instance", sty.column___6Vx4X)}
              render={(cell: any, row: any, index: any) => (
                <React.Fragment>
                  {(() => {
                    try {
                      return row.type == 2;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <BellXFilledIcon
                      className={classNames(projectcss.all, sty.svg__opive)}
                      role={"img"}
                    />
                  ) : null}
                  {(() => {
                    try {
                      return row.type == 1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <TriangleFilledIcon
                      className={classNames(projectcss.all, sty.svg__tlRrp)}
                      role={"img"}
                    />
                  ) : null}
                </React.Fragment>
              )}
              title={"Type"}
            />

            <AntdColumn
              className={classNames("__wab_instance", sty.column___1FiAs)}
              render={(cell: any, row: any, index: any) => (
                <React.Fragment>
                  <PlasmicLink__
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__buxbl
                    )}
                    component={Link}
                    href={"https://www.plasmic.app/"}
                    platform={"nextjs"}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return row.first_name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Some link text";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </PlasmicLink__>
                  <Button
                    className={classNames("__wab_instance", sty.button__ju74F)}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nswOx
                        )}
                      >
                        {"Add Phone"}
                      </div>
                    }
                  />

                  <Modal
                    data-plasmic-name={"modal"}
                    data-plasmic-override={overrides.modal}
                    className={classNames("__wab_instance", sty.modal)}
                    content={
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gwyRh
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jvnJk
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.selectedRow.id;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "This is a Modal!";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vf8Sy
                          )}
                        >
                          {
                            "You can put anything here!\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
                          }
                        </div>
                      </Stack__>
                    }
                    heading={
                      <h3
                        data-plasmic-name={"h3"}
                        data-plasmic-override={overrides.h3}
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.table2.selectedRowKeys;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Heading";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </h3>
                    }
                    isOpen={generateStateValueProp($state, ["modal", "isOpen"])}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "modal",
                        "isOpen"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async val => {
                        const $steps = {};

                        $steps["updateSelectedRow"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["selectedRow"]
                                },
                                operation: 0,
                                value: row
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateSelectedRow"] != null &&
                          typeof $steps["updateSelectedRow"] === "object" &&
                          typeof $steps["updateSelectedRow"].then === "function"
                        ) {
                          $steps["updateSelectedRow"] = await $steps[
                            "updateSelectedRow"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                  />
                </React.Fragment>
              )}
              title={"Link"}
            />
          </AntdTable>
          <AntdSelect
            data-plasmic-name={"select"}
            data-plasmic-override={overrides.select}
            className={classNames("__wab_instance", sty.select)}
            defaultStylesClassName={classNames(
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_library_tailwind_3_4_colors_css.plasmic_tokens,
              plasmic_library_tailwind_3_4_number_tokens_css.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens
            )}
            mode={"single"}
            onChange={async (...eventArgs: any) => {
              generateStateOnChangeProp($state, ["select", "value"]).apply(
                null,
                eventArgs
              );
            }}
            options={(() => {
              try {
                return $queries.query.data.map(row => ({
                  value: row.id,
                  label: row.first_name
                }));
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [
                    { value: "option1", label: "Option 1", type: "option" },
                    { value: "option2", label: "Option 2", type: "option" }
                  ];
                }
                throw e;
              }
            })()}
            placeholder={"Select..."}
            popupScopeClassName={sty["select__popup"]}
            value={generateStateValueProp($state, ["select", "value"])}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navigationBar",
    "section",
    "form",
    "type",
    "columns",
    "individual",
    "org",
    "firstName",
    "input",
    "middleName",
    "input2",
    "lastName",
    "input3",
    "organization",
    "input4",
    "table2",
    "modal",
    "h3",
    "select"
  ],
  navigationBar: ["navigationBar"],
  section: [
    "section",
    "form",
    "type",
    "columns",
    "individual",
    "org",
    "firstName",
    "input",
    "middleName",
    "input2",
    "lastName",
    "input3",
    "organization",
    "input4"
  ],
  form: [
    "form",
    "type",
    "columns",
    "individual",
    "org",
    "firstName",
    "input",
    "middleName",
    "input2",
    "lastName",
    "input3",
    "organization",
    "input4"
  ],
  type: ["type", "columns", "individual", "org"],
  columns: ["columns", "individual", "org"],
  individual: ["individual"],
  org: ["org"],
  firstName: ["firstName", "input"],
  input: ["input"],
  middleName: ["middleName", "input2"],
  input2: ["input2"],
  lastName: ["lastName", "input3"],
  input3: ["input3"],
  organization: ["organization", "input4"],
  input4: ["input4"],
  table2: ["table2", "modal", "h3"],
  modal: ["modal", "h3"],
  h3: ["h3"],
  select: ["select"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  section: "section";
  form: typeof FormWrapper;
  type: typeof RadioGroup;
  columns: "div";
  individual: typeof Radio;
  org: typeof Radio;
  firstName: typeof FormItemWrapper;
  input: typeof AntdInput;
  middleName: typeof FormItemWrapper;
  input2: typeof AntdInput;
  lastName: typeof FormItemWrapper;
  input3: typeof AntdInput;
  organization: typeof FormItemWrapper;
  input4: typeof AntdInput;
  table2: typeof AntdTable;
  modal: typeof Modal;
  h3: "h3";
  select: typeof AntdSelect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    section: makeNodeComponent("section"),
    form: makeNodeComponent("form"),
    type: makeNodeComponent("type"),
    columns: makeNodeComponent("columns"),
    individual: makeNodeComponent("individual"),
    org: makeNodeComponent("org"),
    firstName: makeNodeComponent("firstName"),
    input: makeNodeComponent("input"),
    middleName: makeNodeComponent("middleName"),
    input2: makeNodeComponent("input2"),
    lastName: makeNodeComponent("lastName"),
    input3: makeNodeComponent("input3"),
    organization: makeNodeComponent("organization"),
    input4: makeNodeComponent("input4"),
    table2: makeNodeComponent("table2"),
    modal: makeNodeComponent("modal"),
    h3: makeNodeComponent("h3"),
    select: makeNodeComponent("select"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
